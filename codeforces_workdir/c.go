//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#####################################################################`,##################################//
//#####################################################################  ##################################//
//#####################################################################,  ``###############################//
//#####################################################################+   +###############################//
//#####################################################################'  `################################//
//####################################################################.  ,#################################//
//##################################################################+`  '##################################//
//##############################################################+ .    ####################################//
//#############################################################;`#.  `#####################################//
//############,    .###########,`    `,########`      '#######`:#   .######,`  `+###,`                `.###//
//###########.       ##########,      ,#######       +######, '+   :#####+       :##.                   :##//
//###########        '#########,      ,######       ######:   .   ######:         ##.                   ,##//
//##########,         #########,      ,#####       ######`      `######`          ##.                   ,##//
//##########          +########,      ,####       ######       `######`           ##,                   :##//
//#########'          `########,      ,###.      #####+       .######             ##############;       ###//
//#########     `:     ########,      ,##;      +###++       .######              ##############       ;###//
//########+     +#     .#######,      ,##      ;###;        .#####+       '       #############:       ####//
//########`     ##`     #######,      ,#`     `###.        .#####;       +#       #############       +####//
//########     .##+     ,######,      ,#      ##+         ,#####.       ###       ############       .#####//
//#######`     +###      ######,      ,#      ###        ,#####.      `####       ###########,       ######//
//#######      ####:     ;#####,      ,#      .#        ,#####,      ,#####       ##########+       '######//
//######.                 #####,      ,#       +       .######       `            ````######       `#######//
//######                  '####,      ,#'       +    ,#######+                        #####`       +#######//
//#####,                   ####,      ,##`       '  +########+                        ####'       :########//
//#####                    '###,      ,###        +###########                        ####        #########//
//####:      +#######       ###,      ,##++        `##########                        ###        +#########//
//####       ########.      +##,      ,#,  #`        `#########.                      ##;       .##########//
//###'      `########+      `##,      ,,    :;           :+#####+##########:      ######        ###########//
//###`      ##########       +#,      ,       +.               .###########:      #####`       :###########//
//###      `##########,      ,#,      ,        .#`              ###########:      #####        ############//
//##################################+       :# ++##:            ###########################################//
//##################################.       ##;+######,         ###########################################//
//##################################,      .#;:##########+:`    ###########################################//
//##################################         +#############################################################//
//#################################         ;##############################################################//
//################################    `#    ;##############################################################//
//###############################     ###   ,##############################################################//
//#############################`     '###`   ##############################################################//
//############################      `####,   '#############################################################//
//###########################       #####'    #############################################################//
//##########################       :######   ;#############################################################//
//#########################        #######+'###############################################################//
//########################        +########################################################################//
//#######################        .#########################################################################//
//######################         ##########################################################################//
//#####################`        ;##########################################################################//
//#####################`       `###########################################################################//
//######################       ############################################################################//
//#######################`    ,############################################################################//
//########################.   #############################################################################//
//#########################: ##############################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//

package main

import (
	"fmt"
)


const MOD int64 = 998244353

var toNum []int
var dp []map[int64]int = []map[int64]int{
	map[int64]int{},
	map[int64]int{},
}


func binpow(a int64, b int) int64 {
	if b == 0 {
		return 1
	}
	var half = binpow(a * a, b / 2)
	if b % 2 == 0 {
		a = 1
	}
	return a * half
}

func calcDp(turn int, mask int64) int {
	//fmt.Println("enter", turn, mask)
	if val, ok := dp[turn][mask]; ok {
		//fmt.Println("already calculated", val)
		return val
	}
	for i := 0; i < len(toNum); i++ {
		if mask / binpow(10, i) % 10 == int64(turn) {
			//fmt.Println("put", i)
			var new_mask int64 = (
				mask / binpow(10, i + 1) * binpow(10, i + 1) +
					mask % binpow(10, i)) + 2 * binpow(10, i)
			if calcDp(1 - turn, new_mask) == 0 {
				//fmt.Println("first", turn, mask, i)
				dp[turn][mask] = 1
				return dp[turn][mask]
			}
			for j := 0; j < len(toNum); j++ {
				if new_mask / binpow(10, j) % 10 == 2 && toNum[j] < toNum[i] {
					//fmt.Println("take", j)
					var last_mask int64 = (
						new_mask / binpow(10, j + 1) * binpow(10, j + 1) +
							new_mask % binpow(10, j) +
							    int64(turn) * binpow(10, j))
					if calcDp(1 - turn, last_mask) == 0 {
						//fmt.Println("second", turn, mask, j)
						dp[turn][mask] = 1
						return dp[turn][mask]
					}
				}
			}
		}
	}
	dp[turn][mask] = 0
	return dp[turn][mask]
}


func solve() {
	var n, m, k int
	fmt.Scan(&n, &m, &k)

	var mask int64 = 0
	for i := 0; i < n; i++ {
		var x int
		fmt.Scan(&x)
		toNum = append(toNum, x)
	}
	for i := 0; i < m; i++ {
		var x int
		fmt.Scan(&x)
		mask = mask + 1 * binpow(10, len(toNum))
		toNum = append(toNum, x)
	}
	for i := 0; i < k; i++ {
		var x int
		fmt.Scan(&x)
		mask = mask + 2 * binpow(10, len(toNum))
		toNum = append(toNum, x)
	}
	var val int = calcDp(0, mask)
	if val == 1 {
		fmt.Println("Takahashi")
	} else {
		fmt.Println("Aoki")
	}
}


func main() {
	// export PATH=$PATH:/usr/local/go/bin
	// go run c.go < input.txt

	solve()
}
